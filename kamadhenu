#!/usr/bin/env zsh
# Kamadhenu
# an udderly absurd soothsayer in your shell

# figure out where Kamadhenu sits
# find the executable from its symlink
KMDIR="$(dirname "$(readlink "$0")")"

# Pick a new font and cow at random
randomize() {
    unset COW
    unset FONT
    COW=$(ls $KMDIR/cows | shuf -n 1)
    FONT=$(ls $KMDIR/figlets | shuf -n 1)
    printf "%s\n" "cow: $COW" "font: $FONT"
}

# Spit out fortunes based on input arg
wheelOfFortune() {
    randomize
    if [ -z "$1" ]; then
        fortune -s | cowsay -f $COW | lolcat
        exit 0
    else
        arg="$1"
        # long enough to allow for most words
        # http://www.ravi.io/language-word-lengths
        if [ ${#arg} -le 14 ]; then
            # print short requests as figlet
            figlet -f "$FONT" $arg | cowsay -nf "$COW" | lolcat -a
        else
        # elif [ ${#arg} -le 1024 ]; then
            # requests long enough to break the screen are refused
            cut -c -1024 $arg | cowsay -f "$COW" | lolcat -a
        fi
    fi
}

# I am the gatekeeper. Are you the keymaster?

# Ask the player for input
prompt() {
    unset INPUT
    vared -chp "$PROMPTMSG" INPUT
    parseLots "$INPUT"
}

# cast your lots, see what dreams may come

# Figure out what was input
# - if a number < 10, queue up random fortunes
# - if flags or options, set them
# - if a string, send to (fig/toi)let

parseLots() {
    if [ -z "$1" ]; then
        # if nothing is requested, give free advice
        wheelOfFortune
    elif [ ! $introduced ]; then
        # we havent been properly introduced
        introMsg
        figlet -f ogre 'Kamadhenu' | cowsay -nf 'fox' | lolcat -a
        sleep 3
        beginMsg
        sleep 2
        errorMsg
        sleep 2
        introduced=true
        prompt
    else
        req="$1"
        # Numbers only jacket
        if [ -n "$1" ] && [ $req -eq $req ] 2>/dev/null; then
            while [ "$req" -gt 0 ]
            do
                if [ ! $req -eq $1 ]; then
                    read -ks "?$CONTINUEMSG"
                fi
                wheelOfFortune
                let req-=1
            done
        else
            wheelOfFortune "$req"
        fi
    fi
    prompt
}

# messages and sprites
introMsg() {
    cat << EOF
                    {}}
                   {{}{}
                  {{}}{}}
                 &>&&&&?&@
               &&@&&&@*&@#&#@
            &&&&#&*&&&&@&&&#&&&@
         &#&&@&&$&&&&&&&&&&&@&#&*&@
      &&*$&&$&7&&&$&>&&&&?&&&<&#&$&&#@
  &&&&&&&$&&&&@&!&&&&&&&&&&&&#&*&#&&@>*&&&@
&&&!*&#+&&&&&!&<@&?&&&&?&&@&&/&#@&&&#&<&@&&&&@
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   Prostrate yourself before the Almighty
______________________________________________
EOF
}

beginMsg() {
    cat << EOF


_.-^-.__._.-..-.__.__._.-^-.__.-.._..-..__.-._
         Good, now cast your lots.
_.--._._._.--._..-.-.___.--._.__..__._._._.-..
^^+~*^^**^*~*^*^*~^*^*^*^*~^*~*^+^+^^^+^^+^^+^


EOF
}

errorMsg() {
    cat << EOF


_.-^-.__._.-..-.__.__._.-^-.__.-.._..-..__.-._
^^+~*^^**^*~*^*^*~^*^*^*^*~^*~*^+^+^^^+^^+^^+^
  You may Ctrl-c yourself out at any time.
_.--._._._.--._..-.-.___.--._.__..__._._._.-..


EOF
}

PROMPTMSG="

+^+=^=+^+=+^+^+^==^+^+^+=+^+
What have you come to offer?
;,:.,:;,.,.:;.,.;:..,;.,:.;.
>> "

CONTINUEMSG="
' .  '' . '\".  ' \" '. '   \" . '  . '. \" '.  '
Any key to continue.
_.--._._._.--._..-.-.___.--._.__..__._._._.-..

"

# Accept arguments when called upon
parseLots "$1"
